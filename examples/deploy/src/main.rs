use aleo_agent::account::Account;
use aleo_agent::agent::Agent;
use aleo_agent::program::ProgramManager;
use anyhow::Result;
use std::path::Path;
use std::thread::sleep;
use std::time::Duration;

fn main() -> Result<()> {
    // build an agent with private key
    let private_key = "YOUR PRIVATE KEY"; // APrivateKey1zkp...
    let account = Account::from_private_key(private_key)?;
    let agent = Agent::builder().with_account(account).build();

    // The build folder is generated by using leo build in the Leo project.
    let path = Path::new("/contract/build"); // must be an absolute path
    let local_program = ProgramManager::load_program_from_path(path)?;

    // deploy program
    let deploy_tx_id = agent.deploy_program(&local_program, 1, None)?;
    println!("Deployed program with tx id: {}", deploy_tx_id);

    // waiting for broadcast and confirmation
    sleep(Duration::from_secs(60));

    // get transaction status
    let status = agent.get_confirmed_transaction(&deploy_tx_id)?;
    println!("Deployment tx status: \n {status:?}");

    // get program id
    let program_id = local_program.id();
    let pm = agent.program(program_id.to_string().as_ref())?;

    // execute program
    let inputs = vec!["1u32", "2u32"];
    let exec_tx_id = pm.execute_program("main", inputs.into_iter(), 1, None)?;
    println!("Execute program with tx id : {exec_tx_id}");

    // waiting for broadcast and confirmation
    sleep(Duration::from_secs(60));

    // get transaction status
    let status = agent.get_confirmed_transaction(&exec_tx_id)?;
    println!("Execution tx status: \n{:#?}", status);

    Ok(())
}
